# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Invoice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'list[Links]',
        'id': 'int',
        'account_id': 'int',
        'created_by': 'str',
        'created_on': 'str',
        'payment_date': 'str',
        'payment_id': 'int',
        'paid': 'float',
        'line_items': 'list[PaymentLineItem]',
        'reference_number': 'str',
        'status_code': 'str'
    }

    attribute_map = {
        'links': '_links',
        'id': 'id',
        'account_id': 'accountId',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'payment_date': 'paymentDate',
        'payment_id': 'paymentId',
        'paid': 'paid',
        'line_items': 'lineItems',
        'reference_number': 'referenceNumber',
        'status_code': 'statusCode'
    }

    def __init__(self, links=None, id=None, account_id=None, created_by=None, created_on=None, payment_date=None, payment_id=None, paid=None, line_items=None, reference_number=None, status_code=None, local_vars_configuration=None):  # noqa: E501
        """Invoice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._id = None
        self._account_id = None
        self._created_by = None
        self._created_on = None
        self._payment_date = None
        self._payment_id = None
        self._paid = None
        self._line_items = None
        self._reference_number = None
        self._status_code = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if payment_date is not None:
            self.payment_date = payment_date
        if payment_id is not None:
            self.payment_id = payment_id
        if paid is not None:
            self.paid = paid
        if line_items is not None:
            self.line_items = line_items
        if reference_number is not None:
            self.reference_number = reference_number
        if status_code is not None:
            self.status_code = status_code

    @property
    def links(self):
        """Gets the links of this Invoice.  # noqa: E501


        :return: The links of this Invoice.  # noqa: E501
        :rtype: list[Links]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Invoice.


        :param links: The links of this Invoice.  # noqa: E501
        :type links: list[Links]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501

        Unique identifier for invoice  # noqa: E501

        :return: The id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.

        Unique identifier for invoice  # noqa: E501

        :param id: The id of this Invoice.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Invoice.  # noqa: E501

        id of the account  # noqa: E501

        :return: The account_id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Invoice.

        id of the account  # noqa: E501

        :param account_id: The account_id of this Invoice.  # noqa: E501
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def created_by(self):
        """Gets the created_by of this Invoice.  # noqa: E501

        username of the account  # noqa: E501

        :return: The created_by of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Invoice.

        username of the account  # noqa: E501

        :param created_by: The created_by of this Invoice.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this Invoice.  # noqa: E501

        invoice creation date  # noqa: E501

        :return: The created_on of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Invoice.

        invoice creation date  # noqa: E501

        :param created_on: The created_on of this Invoice.  # noqa: E501
        :type created_on: str
        """

        self._created_on = created_on

    @property
    def payment_date(self):
        """Gets the payment_date of this Invoice.  # noqa: E501

        date made payment  # noqa: E501

        :return: The payment_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Invoice.

        date made payment  # noqa: E501

        :param payment_date: The payment_date of this Invoice.  # noqa: E501
        :type payment_date: str
        """

        self._payment_date = payment_date

    @property
    def payment_id(self):
        """Gets the payment_id of this Invoice.  # noqa: E501

        payment identifier  # noqa: E501

        :return: The payment_id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Invoice.

        payment identifier  # noqa: E501

        :param payment_id: The payment_id of this Invoice.  # noqa: E501
        :type payment_id: int
        """

        self._payment_id = payment_id

    @property
    def paid(self):
        """Gets the paid of this Invoice.  # noqa: E501

        amount paid  # noqa: E501

        :return: The paid of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this Invoice.

        amount paid  # noqa: E501

        :param paid: The paid of this Invoice.  # noqa: E501
        :type paid: float
        """

        self._paid = paid

    @property
    def line_items(self):
        """Gets the line_items of this Invoice.  # noqa: E501


        :return: The line_items of this Invoice.  # noqa: E501
        :rtype: list[PaymentLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Invoice.


        :param line_items: The line_items of this Invoice.  # noqa: E501
        :type line_items: list[PaymentLineItem]
        """

        self._line_items = line_items

    @property
    def reference_number(self):
        """Gets the reference_number of this Invoice.  # noqa: E501

        reference number  # noqa: E501

        :return: The reference_number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this Invoice.

        reference number  # noqa: E501

        :param reference_number: The reference_number of this Invoice.  # noqa: E501
        :type reference_number: str
        """

        self._reference_number = reference_number

    @property
    def status_code(self):
        """Gets the status_code of this Invoice.  # noqa: E501

        Status of payment.  # noqa: E501

        :return: The status_code of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Invoice.

        Status of payment.  # noqa: E501

        :param status_code: The status_code of this Invoice.  # noqa: E501
        :type status_code: str
        """
        allowed_values = ["DRAFT", "IN_PROGRESS", "CREATED", "COMPLETED", "PARTIAL", "FAILED", "REFUNDED", "CANCELLED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status_code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invoice):
            return True

        return self.to_dict() != other.to_dict()
